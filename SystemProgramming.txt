			СИСТЕМНОЕ ПРОГРАММИРОВАНИЕ.
		Дисциплина направлена на многопоточность.
	Любая программа загружается в память в виде процесса.
	Процесс - это задача (программа) стадии выполнения. Процесс может выполняться в один или несколько потоков.
	Поток - это последовательность комманд центральному процессору. Многие программы распараллеливают выполнение
за счет потоков, многие делают это за счет процесса. 
	Ключевая разница между процессами и потоками состоит
в том, что у каждого процесса своё отдельное адресное пространство (область памяти, доступное этому процессу),
а потоки используют общее адресное пространство и разделяют его, это упрощает обмен данными между потоками.
	Существуют механизмы обмена данными между процессами, но это гораздо сложнее, чем обмен данными между потоками.
Потоки (Threads) - используют общее адресное пространство благодаря тому, что они принадлежат одному процессу.
Поток может существовать в пределах только одного процесса и не может существовать сам по себе.
Поток - это минимальная работа, которую может выполнить процесс.
	Абсолютно любой процесс порождает как минимум один поток, но процесс может порождать и другие процессы,
у каждого из которых свое адресное пространство. Иногда это повышает стабильность и отказоустойчивость программы 
в отличии от потока, особенно, при возникновении исключительных ситуаций, поскольку из-за исключения падает процесс.
И если вся работа происходила внутри него в отдельных потоках, то ее результаты полностью теряются,
поскольку процесс тянет за собой все принадлежащие ему потоки. Но если программа выполняется в несколько процессов,
то при падении одного из них теряется только часть работы. Кроме того, распараллеливание на процессы, а не на потоки,
весьма эффективо в 32-битных приложениях, поскольку даже 64-битная среда может выделить 32-битному процессу не более 
2 Гб ОЗУ, а современные приложения требуют гораздо больше памяти.
	При распараллеливании приложения на процессы существуют понятия родительский и дочерний процесс.
	У каждого процесса есть свой PID - Process ID. Это уникальное число, которое присваивается процессу при его запуске
ядром ОС. Ядро ОС обращается к процессу именно по его PID. Кроме того, у каждого процесса есть свой приоритет.
Всего существует 6 уровней приоритета : низкий, ниже среднего, средний, выше среднего, высокий, рельного времени.
По умолчанию всем процессам присваивается средний приоритет.

		Домены приложений.
Домены приложений используются для запуска нескольких приложений в одном процессе, для изоляции данных одного приложения
от другого приложения. Это позволяет изолировать одно приложение от ошибок другого приложения. Кроме того, приложения,
запущенные в одном процессе, могут быть остановлены без остановления самого процесса. Одно приложение не может
получить доступ к ресурсам другого, поскольку код ограничен областью видимости того домена, в котором он запущен.
Также при помощи доменных приложений удобно управлять политикой безопасности. При доменной организации приложений
сборки загружаются в определенный домен. Сборкой может быть exe/dll файл. 

		Потоки.
Поток - это независимая последовательность инструкций, которая имеет точку входа и точку выхода.
Точкой входа является первое выражение той функции, которая запускается в потоке. А точкой выхода - 
последнее выражение этой функции. В отдельных потоках целесообразно запускать ресурсоёмкие и длительные задачи такие как
упаковка/распаковка файла, копирование файла, установка сетевого соединения и т.д. Если эти задачи запускать в одном
потоке с интерфейсом программы, то программа будет часто зависать и не будет реагировать на действия пользователя,
но следует учитывать, что многопоточность также требует определенных ресурсов центрального процессора, что замедляет
общую произволительность программ. Но делает ее более интерактивной и отзывчивой. При взаимодействии между потоками
могут возникать такие проблемы как:
	- Starvation, или голодание - это промежуток времени от пробуждения потока до его загрузки на конвейр процессора. 
Все это время поток находится в списке готовых к испольнению потоков. Такая ситуация возникает при большом количестве потоков 
с одинаковым приоритетом. Для смягчений этой ситуации система автоматически вызывает низкоприоритетные потоки даже при
наличии высокоприоритетных потоках.
	- Race, или гонка потоков - это беспорядочное параллельное выполнение двух и более потоках. 
Для устранения гонки потоков используют механизмы задержки и блокирования, а также некоторых примитивов синхронизации. 
Гонка потоков обычно легко устраняется. Для этого потоки нужно просто синхронизировать. 
	Синхронизация позволяет выполнять потоки в определенном порядке и устраняет обе вышеописанные проблемы.
Для синхронизации используются мониторы, мьютексы, симафоры и интерлокед (interlocked).
	Для работы с потоками необходимо подключить пространство имен System.Threading. Основным классов, обеспечивающим
любые манипуляции с потоком является Thread. Также существуют классы Monitor, Mutex, Semaphore, Interlocked.
	Для работы с множеством потоков используется класс ThreadPool. Он представляет собой коллекцию потоков, 
работающий в фоновом режиме. Используется, чтобы разгрузить основной поток от операции ожидания.
	Timer - позволяет вызывать метод в заданные интервалы времени. Timer запускается в 4 этапа.
	Если нужно приостановить выполнение потока, испольуется метод Suspend. Для возобновления - Resume.
	Принудительно завершить работу потока можно методом Abort().
